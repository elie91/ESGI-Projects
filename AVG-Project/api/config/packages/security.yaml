security:
  encoders:
    App\Entity\User:
      algorithm: 'bcrypt'

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/login_check
      stateless: true
      anonymous: true
      provider: app_user_provider
      json_login:
        check_path: /login_check
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    main:
      pattern: ^/
      anonymous: true
      lazy: true
      stateless: true
      provider: app_user_provider
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: '^/login_check', role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/events', method: GET, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/(reset_password|token_reset_password)', role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/?.*docs', role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/users$', method: POST, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/homes', method: GET, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/services', method: GET, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/', roles: [ ROLE_USER ] }
