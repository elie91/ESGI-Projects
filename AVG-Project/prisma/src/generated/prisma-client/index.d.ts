// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  doctrineMigrationVersion: (
    where?: DoctrineMigrationVersionWhereInput
  ) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  eventUser: (where?: EventUserWhereInput) => Promise<boolean>;
  home: (where?: HomeWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  option: (where?: OptionWhereInput) => Promise<boolean>;
  picture: (where?: PictureWhereInput) => Promise<boolean>;
  rent: (where?: RentWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  doctrineMigrationVersion: (
    where: DoctrineMigrationVersionWhereUniqueInput
  ) => DoctrineMigrationVersionNullablePromise;
  doctrineMigrationVersions: (args?: {
    where?: DoctrineMigrationVersionWhereInput;
    orderBy?: DoctrineMigrationVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DoctrineMigrationVersion>;
  doctrineMigrationVersionsConnection: (args?: {
    where?: DoctrineMigrationVersionWhereInput;
    orderBy?: DoctrineMigrationVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DoctrineMigrationVersionConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  eventUser: (where: EventUserWhereUniqueInput) => EventUserNullablePromise;
  eventUsers: (args?: {
    where?: EventUserWhereInput;
    orderBy?: EventUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EventUser>;
  eventUsersConnection: (args?: {
    where?: EventUserWhereInput;
    orderBy?: EventUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventUserConnectionPromise;
  home: (where: HomeWhereUniqueInput) => HomeNullablePromise;
  homes: (args?: {
    where?: HomeWhereInput;
    orderBy?: HomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Home>;
  homesConnection: (args?: {
    where?: HomeWhereInput;
    orderBy?: HomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HomeConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  option: (where: OptionWhereUniqueInput) => OptionNullablePromise;
  options: (args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Option>;
  optionsConnection: (args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OptionConnectionPromise;
  picture: (where: PictureWhereUniqueInput) => PictureNullablePromise;
  pictures: (args?: {
    where?: PictureWhereInput;
    orderBy?: PictureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Picture>;
  picturesConnection: (args?: {
    where?: PictureWhereInput;
    orderBy?: PictureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PictureConnectionPromise;
  rent: (where: RentWhereUniqueInput) => RentNullablePromise;
  rents: (args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Rent>;
  rentsConnection: (args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RentConnectionPromise;
  service: (where: ServiceWhereUniqueInput) => ServiceNullablePromise;
  services: (args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Service>;
  servicesConnection: (args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDoctrineMigrationVersion: (
    data: DoctrineMigrationVersionCreateInput
  ) => DoctrineMigrationVersionPromise;
  updateDoctrineMigrationVersion: (args: {
    data: DoctrineMigrationVersionUpdateInput;
    where: DoctrineMigrationVersionWhereUniqueInput;
  }) => DoctrineMigrationVersionPromise;
  updateManyDoctrineMigrationVersions: (args: {
    data: DoctrineMigrationVersionUpdateManyMutationInput;
    where?: DoctrineMigrationVersionWhereInput;
  }) => BatchPayloadPromise;
  upsertDoctrineMigrationVersion: (args: {
    where: DoctrineMigrationVersionWhereUniqueInput;
    create: DoctrineMigrationVersionCreateInput;
    update: DoctrineMigrationVersionUpdateInput;
  }) => DoctrineMigrationVersionPromise;
  deleteDoctrineMigrationVersion: (
    where: DoctrineMigrationVersionWhereUniqueInput
  ) => DoctrineMigrationVersionPromise;
  deleteManyDoctrineMigrationVersions: (
    where?: DoctrineMigrationVersionWhereInput
  ) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createEventUser: (data: EventUserCreateInput) => EventUserPromise;
  updateEventUser: (args: {
    data: EventUserUpdateInput;
    where: EventUserWhereUniqueInput;
  }) => EventUserPromise;
  updateManyEventUsers: (args: {
    data: EventUserUpdateManyMutationInput;
    where?: EventUserWhereInput;
  }) => BatchPayloadPromise;
  upsertEventUser: (args: {
    where: EventUserWhereUniqueInput;
    create: EventUserCreateInput;
    update: EventUserUpdateInput;
  }) => EventUserPromise;
  deleteEventUser: (where: EventUserWhereUniqueInput) => EventUserPromise;
  deleteManyEventUsers: (where?: EventUserWhereInput) => BatchPayloadPromise;
  createHome: (data: HomeCreateInput) => HomePromise;
  updateHome: (args: {
    data: HomeUpdateInput;
    where: HomeWhereUniqueInput;
  }) => HomePromise;
  updateManyHomes: (args: {
    data: HomeUpdateManyMutationInput;
    where?: HomeWhereInput;
  }) => BatchPayloadPromise;
  upsertHome: (args: {
    where: HomeWhereUniqueInput;
    create: HomeCreateInput;
    update: HomeUpdateInput;
  }) => HomePromise;
  deleteHome: (where: HomeWhereUniqueInput) => HomePromise;
  deleteManyHomes: (where?: HomeWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createOption: (data: OptionCreateInput) => OptionPromise;
  updateOption: (args: {
    data: OptionUpdateInput;
    where: OptionWhereUniqueInput;
  }) => OptionPromise;
  updateManyOptions: (args: {
    data: OptionUpdateManyMutationInput;
    where?: OptionWhereInput;
  }) => BatchPayloadPromise;
  upsertOption: (args: {
    where: OptionWhereUniqueInput;
    create: OptionCreateInput;
    update: OptionUpdateInput;
  }) => OptionPromise;
  deleteOption: (where: OptionWhereUniqueInput) => OptionPromise;
  deleteManyOptions: (where?: OptionWhereInput) => BatchPayloadPromise;
  createPicture: (data: PictureCreateInput) => PicturePromise;
  updatePicture: (args: {
    data: PictureUpdateInput;
    where: PictureWhereUniqueInput;
  }) => PicturePromise;
  updateManyPictures: (args: {
    data: PictureUpdateManyMutationInput;
    where?: PictureWhereInput;
  }) => BatchPayloadPromise;
  upsertPicture: (args: {
    where: PictureWhereUniqueInput;
    create: PictureCreateInput;
    update: PictureUpdateInput;
  }) => PicturePromise;
  deletePicture: (where: PictureWhereUniqueInput) => PicturePromise;
  deleteManyPictures: (where?: PictureWhereInput) => BatchPayloadPromise;
  createRent: (data: RentCreateInput) => RentPromise;
  updateRent: (args: {
    data: RentUpdateInput;
    where: RentWhereUniqueInput;
  }) => RentPromise;
  updateManyRents: (args: {
    data: RentUpdateManyMutationInput;
    where?: RentWhereInput;
  }) => BatchPayloadPromise;
  upsertRent: (args: {
    where: RentWhereUniqueInput;
    create: RentCreateInput;
    update: RentUpdateInput;
  }) => RentPromise;
  deleteRent: (where: RentWhereUniqueInput) => RentPromise;
  deleteManyRents: (where?: RentWhereInput) => BatchPayloadPromise;
  createService: (data: ServiceCreateInput) => ServicePromise;
  updateService: (args: {
    data: ServiceUpdateInput;
    where: ServiceWhereUniqueInput;
  }) => ServicePromise;
  updateManyServices: (args: {
    data: ServiceUpdateManyMutationInput;
    where?: ServiceWhereInput;
  }) => BatchPayloadPromise;
  upsertService: (args: {
    where: ServiceWhereUniqueInput;
    create: ServiceCreateInput;
    update: ServiceUpdateInput;
  }) => ServicePromise;
  deleteService: (where: ServiceWhereUniqueInput) => ServicePromise;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  doctrineMigrationVersion: (
    where?: DoctrineMigrationVersionSubscriptionWhereInput
  ) => DoctrineMigrationVersionSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  eventUser: (
    where?: EventUserSubscriptionWhereInput
  ) => EventUserSubscriptionPayloadSubscription;
  home: (
    where?: HomeSubscriptionWhereInput
  ) => HomeSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  option: (
    where?: OptionSubscriptionWhereInput
  ) => OptionSubscriptionPayloadSubscription;
  picture: (
    where?: PictureSubscriptionWhereInput
  ) => PictureSubscriptionPayloadSubscription;
  rent: (
    where?: RentSubscriptionWhereInput
  ) => RentSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DoctrineMigrationVersionOrderByInput =
  | "version_ASC"
  | "version_DESC"
  | "executedAt_ASC"
  | "executedAt_DESC"
  | "executionTime_ASC"
  | "executionTime_DESC";

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC";

export type HomeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "active_ASC"
  | "active_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "country_ASC"
  | "country_DESC"
  | "description_ASC"
  | "description_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "status_ASC"
  | "status_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "name_ASC"
  | "name_DESC"
  | "peopleLimit_ASC"
  | "peopleLimit_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "status_ASC"
  | "status_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "viewed_ASC"
  | "viewed_DESC";

export type OptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type PictureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "image_ASC"
  | "image_DESC"
  | "isMainPicture_ASC"
  | "isMainPicture_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isOwner_ASC"
  | "isOwner_DESC";

export type RentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "company_ASC"
  | "company_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "roles_ASC"
  | "roles_DESC"
  | "token_ASC"
  | "token_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DoctrineMigrationVersionWhereUniqueInput = AtLeastOne<{
  version: Maybe<ID_Input>;
}>;

export interface DoctrineMigrationVersionWhereInput {
  version?: Maybe<ID_Input>;
  version_not?: Maybe<ID_Input>;
  version_in?: Maybe<ID_Input[] | ID_Input>;
  version_not_in?: Maybe<ID_Input[] | ID_Input>;
  version_lt?: Maybe<ID_Input>;
  version_lte?: Maybe<ID_Input>;
  version_gt?: Maybe<ID_Input>;
  version_gte?: Maybe<ID_Input>;
  version_contains?: Maybe<ID_Input>;
  version_not_contains?: Maybe<ID_Input>;
  version_starts_with?: Maybe<ID_Input>;
  version_not_starts_with?: Maybe<ID_Input>;
  version_ends_with?: Maybe<ID_Input>;
  version_not_ends_with?: Maybe<ID_Input>;
  executedAt?: Maybe<DateTimeInput>;
  executedAt_not?: Maybe<DateTimeInput>;
  executedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  executedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  executedAt_lt?: Maybe<DateTimeInput>;
  executedAt_lte?: Maybe<DateTimeInput>;
  executedAt_gt?: Maybe<DateTimeInput>;
  executedAt_gte?: Maybe<DateTimeInput>;
  executionTime?: Maybe<Int>;
  executionTime_not?: Maybe<Int>;
  executionTime_in?: Maybe<Int[] | Int>;
  executionTime_not_in?: Maybe<Int[] | Int>;
  executionTime_lt?: Maybe<Int>;
  executionTime_lte?: Maybe<Int>;
  executionTime_gt?: Maybe<Int>;
  executionTime_gte?: Maybe<Int>;
  AND?: Maybe<
    DoctrineMigrationVersionWhereInput[] | DoctrineMigrationVersionWhereInput
  >;
  OR?: Maybe<
    DoctrineMigrationVersionWhereInput[] | DoctrineMigrationVersionWhereInput
  >;
  NOT?: Maybe<
    DoctrineMigrationVersionWhereInput[] | DoctrineMigrationVersionWhereInput
  >;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ServiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  rentService?: Maybe<RentWhereInput>;
  AND?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
  OR?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
  NOT?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
}

export interface RentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  rentService_every?: Maybe<ServiceWhereInput>;
  rentService_some?: Maybe<ServiceWhereInput>;
  rentService_none?: Maybe<ServiceWhereInput>;
  home?: Maybe<HomeWhereInput>;
  owner?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RentWhereInput[] | RentWhereInput>;
  OR?: Maybe<RentWhereInput[] | RentWhereInput>;
  NOT?: Maybe<RentWhereInput[] | RentWhereInput>;
}

export interface HomeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  owner?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  homeOption_every?: Maybe<OptionWhereInput>;
  homeOption_some?: Maybe<OptionWhereInput>;
  homeOption_none?: Maybe<OptionWhereInput>;
  pictures_every?: Maybe<PictureWhereInput>;
  pictures_some?: Maybe<PictureWhereInput>;
  pictures_none?: Maybe<PictureWhereInput>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  AND?: Maybe<HomeWhereInput[] | HomeWhereInput>;
  OR?: Maybe<HomeWhereInput[] | HomeWhereInput>;
  NOT?: Maybe<HomeWhereInput[] | HomeWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  company?: Maybe<String>;
  company_not?: Maybe<String>;
  company_in?: Maybe<String[] | String>;
  company_not_in?: Maybe<String[] | String>;
  company_lt?: Maybe<String>;
  company_lte?: Maybe<String>;
  company_gt?: Maybe<String>;
  company_gte?: Maybe<String>;
  company_contains?: Maybe<String>;
  company_not_contains?: Maybe<String>;
  company_starts_with?: Maybe<String>;
  company_not_starts_with?: Maybe<String>;
  company_ends_with?: Maybe<String>;
  company_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deletedAt?: Maybe<DateTimeInput>;
  deletedAt_not?: Maybe<DateTimeInput>;
  deletedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deletedAt_lt?: Maybe<DateTimeInput>;
  deletedAt_lte?: Maybe<DateTimeInput>;
  deletedAt_gt?: Maybe<DateTimeInput>;
  deletedAt_gte?: Maybe<DateTimeInput>;
  homes_every?: Maybe<HomeWhereInput>;
  homes_some?: Maybe<HomeWhereInput>;
  homes_none?: Maybe<HomeWhereInput>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  peopleLimit?: Maybe<Int>;
  peopleLimit_not?: Maybe<Int>;
  peopleLimit_in?: Maybe<Int[] | Int>;
  peopleLimit_not_in?: Maybe<Int[] | Int>;
  peopleLimit_lt?: Maybe<Int>;
  peopleLimit_lte?: Maybe<Int>;
  peopleLimit_gt?: Maybe<Int>;
  peopleLimit_gte?: Maybe<Int>;
  rent?: Maybe<RentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  eventUsers_every?: Maybe<EventUserWhereInput>;
  eventUsers_some?: Maybe<EventUserWhereInput>;
  eventUsers_none?: Maybe<EventUserWhereInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface EventUserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  event?: Maybe<EventWhereInput>;
  user?: Maybe<UserWhereInput>;
  isOwner?: Maybe<Boolean>;
  isOwner_not?: Maybe<Boolean>;
  AND?: Maybe<EventUserWhereInput[] | EventUserWhereInput>;
  OR?: Maybe<EventUserWhereInput[] | EventUserWhereInput>;
  NOT?: Maybe<EventUserWhereInput[] | EventUserWhereInput>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  owner?: Maybe<UserWhereInput>;
  viewed?: Maybe<Boolean>;
  viewed_not?: Maybe<Boolean>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface OptionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  homeOption?: Maybe<HomeWhereInput>;
  AND?: Maybe<OptionWhereInput[] | OptionWhereInput>;
  OR?: Maybe<OptionWhereInput[] | OptionWhereInput>;
  NOT?: Maybe<OptionWhereInput[] | OptionWhereInput>;
}

export interface PictureWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  isMainPicture?: Maybe<Boolean>;
  isMainPicture_not?: Maybe<Boolean>;
  home?: Maybe<HomeWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PictureWhereInput[] | PictureWhereInput>;
  OR?: Maybe<PictureWhereInput[] | PictureWhereInput>;
  NOT?: Maybe<PictureWhereInput[] | PictureWhereInput>;
}

export type EventUserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type HomeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OptionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PictureWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface DoctrineMigrationVersionCreateInput {
  version?: Maybe<ID_Input>;
  executedAt?: Maybe<DateTimeInput>;
  executionTime?: Maybe<Int>;
}

export interface DoctrineMigrationVersionUpdateInput {
  executedAt?: Maybe<DateTimeInput>;
  executionTime?: Maybe<Int>;
}

export interface DoctrineMigrationVersionUpdateManyMutationInput {
  executedAt?: Maybe<DateTimeInput>;
  executionTime?: Maybe<Int>;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  description?: Maybe<String>;
  name: String;
  peopleLimit: Int;
  rent?: Maybe<RentCreateOneInput>;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  eventUsers?: Maybe<EventUserCreateManyWithoutEventInput>;
  status: String;
}

export interface RentCreateOneInput {
  create?: Maybe<RentCreateInput>;
  connect?: Maybe<RentWhereUniqueInput>;
}

export interface RentCreateInput {
  id?: Maybe<ID_Input>;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  totalPrice: Float;
  rentService?: Maybe<ServiceCreateManyWithoutRentServiceInput>;
  home: HomeCreateOneInput;
  owner: UserCreateOneInput;
}

export interface ServiceCreateManyWithoutRentServiceInput {
  create?: Maybe<
    | ServiceCreateWithoutRentServiceInput[]
    | ServiceCreateWithoutRentServiceInput
  >;
  connect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
}

export interface ServiceCreateWithoutRentServiceInput {
  id?: Maybe<ID_Input>;
  name: String;
  price: Float;
}

export interface HomeCreateOneInput {
  create?: Maybe<HomeCreateInput>;
  connect?: Maybe<HomeWhereUniqueInput>;
}

export interface HomeCreateInput {
  id?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  address: String;
  city: String;
  country: String;
  description?: Maybe<String>;
  name: String;
  price: Float;
  owner?: Maybe<UserCreateOneWithoutHomesInput>;
  homeOption?: Maybe<OptionCreateManyWithoutHomeOptionInput>;
  pictures?: Maybe<PictureCreateManyWithoutHomeInput>;
  type: String;
  status: String;
}

export interface UserCreateOneWithoutHomesInput {
  create?: Maybe<UserCreateWithoutHomesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutHomesInput {
  id?: Maybe<ID_Input>;
  company?: Maybe<String>;
  email: String;
  firstname: String;
  lastname: String;
  password: String;
  phone: String;
  roles: Json;
  token?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  events?: Maybe<EventCreateManyInput>;
  notifications?: Maybe<NotificationCreateManyWithoutOwnerInput>;
}

export interface EventCreateManyInput {
  create?: Maybe<EventCreateInput[] | EventCreateInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface NotificationCreateManyWithoutOwnerInput {
  create?: Maybe<
    NotificationCreateWithoutOwnerInput[] | NotificationCreateWithoutOwnerInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface NotificationCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  description?: Maybe<String>;
  viewed?: Maybe<Boolean>;
}

export interface OptionCreateManyWithoutHomeOptionInput {
  create?: Maybe<
    OptionCreateWithoutHomeOptionInput[] | OptionCreateWithoutHomeOptionInput
  >;
  connect?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
}

export interface OptionCreateWithoutHomeOptionInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface PictureCreateManyWithoutHomeInput {
  create?: Maybe<
    PictureCreateWithoutHomeInput[] | PictureCreateWithoutHomeInput
  >;
  connect?: Maybe<PictureWhereUniqueInput[] | PictureWhereUniqueInput>;
}

export interface PictureCreateWithoutHomeInput {
  id?: Maybe<ID_Input>;
  image: String;
  isMainPicture?: Maybe<Boolean>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  company?: Maybe<String>;
  email: String;
  firstname: String;
  lastname: String;
  password: String;
  phone: String;
  roles: Json;
  token?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  homes?: Maybe<HomeCreateManyWithoutOwnerInput>;
  events?: Maybe<EventCreateManyInput>;
  notifications?: Maybe<NotificationCreateManyWithoutOwnerInput>;
}

export interface HomeCreateManyWithoutOwnerInput {
  create?: Maybe<HomeCreateWithoutOwnerInput[] | HomeCreateWithoutOwnerInput>;
  connect?: Maybe<HomeWhereUniqueInput[] | HomeWhereUniqueInput>;
}

export interface HomeCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  address: String;
  city: String;
  country: String;
  description?: Maybe<String>;
  name: String;
  price: Float;
  homeOption?: Maybe<OptionCreateManyWithoutHomeOptionInput>;
  pictures?: Maybe<PictureCreateManyWithoutHomeInput>;
  type: String;
  status: String;
}

export interface EventUserCreateManyWithoutEventInput {
  create?: Maybe<
    EventUserCreateWithoutEventInput[] | EventUserCreateWithoutEventInput
  >;
  connect?: Maybe<EventUserWhereUniqueInput[] | EventUserWhereUniqueInput>;
}

export interface EventUserCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  isOwner?: Maybe<Boolean>;
}

export interface EventUpdateInput {
  description?: Maybe<String>;
  name?: Maybe<String>;
  peopleLimit?: Maybe<Int>;
  rent?: Maybe<RentUpdateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  eventUsers?: Maybe<EventUserUpdateManyWithoutEventInput>;
  status?: Maybe<String>;
}

export interface RentUpdateOneInput {
  create?: Maybe<RentCreateInput>;
  update?: Maybe<RentUpdateDataInput>;
  upsert?: Maybe<RentUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RentWhereUniqueInput>;
}

export interface RentUpdateDataInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  totalPrice?: Maybe<Float>;
  rentService?: Maybe<ServiceUpdateManyWithoutRentServiceInput>;
  home?: Maybe<HomeUpdateOneRequiredInput>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ServiceUpdateManyWithoutRentServiceInput {
  create?: Maybe<
    | ServiceCreateWithoutRentServiceInput[]
    | ServiceCreateWithoutRentServiceInput
  >;
  delete?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  connect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  set?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  disconnect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  update?: Maybe<
    | ServiceUpdateWithWhereUniqueWithoutRentServiceInput[]
    | ServiceUpdateWithWhereUniqueWithoutRentServiceInput
  >;
  upsert?: Maybe<
    | ServiceUpsertWithWhereUniqueWithoutRentServiceInput[]
    | ServiceUpsertWithWhereUniqueWithoutRentServiceInput
  >;
  deleteMany?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  updateMany?: Maybe<
    | ServiceUpdateManyWithWhereNestedInput[]
    | ServiceUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceUpdateWithWhereUniqueWithoutRentServiceInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateWithoutRentServiceDataInput;
}

export interface ServiceUpdateWithoutRentServiceDataInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface ServiceUpsertWithWhereUniqueWithoutRentServiceInput {
  where: ServiceWhereUniqueInput;
  update: ServiceUpdateWithoutRentServiceDataInput;
  create: ServiceCreateWithoutRentServiceInput;
}

export interface ServiceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  AND?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  OR?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  NOT?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
}

export interface ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput;
  data: ServiceUpdateManyDataInput;
}

export interface ServiceUpdateManyDataInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface HomeUpdateOneRequiredInput {
  create?: Maybe<HomeCreateInput>;
  update?: Maybe<HomeUpdateDataInput>;
  upsert?: Maybe<HomeUpsertNestedInput>;
  connect?: Maybe<HomeWhereUniqueInput>;
}

export interface HomeUpdateDataInput {
  active?: Maybe<Boolean>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneWithoutHomesInput>;
  homeOption?: Maybe<OptionUpdateManyWithoutHomeOptionInput>;
  pictures?: Maybe<PictureUpdateManyWithoutHomeInput>;
  type?: Maybe<String>;
  status?: Maybe<String>;
}

export interface UserUpdateOneWithoutHomesInput {
  create?: Maybe<UserCreateWithoutHomesInput>;
  update?: Maybe<UserUpdateWithoutHomesDataInput>;
  upsert?: Maybe<UserUpsertWithoutHomesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutHomesDataInput {
  company?: Maybe<String>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  roles?: Maybe<Json>;
  token?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  events?: Maybe<EventUpdateManyInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutOwnerInput>;
}

export interface EventUpdateManyInput {
  create?: Maybe<EventCreateInput[] | EventCreateInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueNestedInput[]
    | EventUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueNestedInput[]
    | EventUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput;
  data: EventUpdateDataInput;
}

export interface EventUpdateDataInput {
  description?: Maybe<String>;
  name?: Maybe<String>;
  peopleLimit?: Maybe<Int>;
  rent?: Maybe<RentUpdateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  eventUsers?: Maybe<EventUserUpdateManyWithoutEventInput>;
  status?: Maybe<String>;
}

export interface EventUserUpdateManyWithoutEventInput {
  create?: Maybe<
    EventUserCreateWithoutEventInput[] | EventUserCreateWithoutEventInput
  >;
  delete?: Maybe<EventUserWhereUniqueInput[] | EventUserWhereUniqueInput>;
  connect?: Maybe<EventUserWhereUniqueInput[] | EventUserWhereUniqueInput>;
  set?: Maybe<EventUserWhereUniqueInput[] | EventUserWhereUniqueInput>;
  disconnect?: Maybe<EventUserWhereUniqueInput[] | EventUserWhereUniqueInput>;
  update?: Maybe<
    | EventUserUpdateWithWhereUniqueWithoutEventInput[]
    | EventUserUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | EventUserUpsertWithWhereUniqueWithoutEventInput[]
    | EventUserUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<EventUserScalarWhereInput[] | EventUserScalarWhereInput>;
  updateMany?: Maybe<
    | EventUserUpdateManyWithWhereNestedInput[]
    | EventUserUpdateManyWithWhereNestedInput
  >;
}

export interface EventUserUpdateWithWhereUniqueWithoutEventInput {
  where: EventUserWhereUniqueInput;
  data: EventUserUpdateWithoutEventDataInput;
}

export interface EventUserUpdateWithoutEventDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  isOwner?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  company?: Maybe<String>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  roles?: Maybe<Json>;
  token?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  homes?: Maybe<HomeUpdateManyWithoutOwnerInput>;
  events?: Maybe<EventUpdateManyInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutOwnerInput>;
}

export interface HomeUpdateManyWithoutOwnerInput {
  create?: Maybe<HomeCreateWithoutOwnerInput[] | HomeCreateWithoutOwnerInput>;
  delete?: Maybe<HomeWhereUniqueInput[] | HomeWhereUniqueInput>;
  connect?: Maybe<HomeWhereUniqueInput[] | HomeWhereUniqueInput>;
  set?: Maybe<HomeWhereUniqueInput[] | HomeWhereUniqueInput>;
  disconnect?: Maybe<HomeWhereUniqueInput[] | HomeWhereUniqueInput>;
  update?: Maybe<
    | HomeUpdateWithWhereUniqueWithoutOwnerInput[]
    | HomeUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | HomeUpsertWithWhereUniqueWithoutOwnerInput[]
    | HomeUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<HomeScalarWhereInput[] | HomeScalarWhereInput>;
  updateMany?: Maybe<
    HomeUpdateManyWithWhereNestedInput[] | HomeUpdateManyWithWhereNestedInput
  >;
}

export interface HomeUpdateWithWhereUniqueWithoutOwnerInput {
  where: HomeWhereUniqueInput;
  data: HomeUpdateWithoutOwnerDataInput;
}

export interface HomeUpdateWithoutOwnerDataInput {
  active?: Maybe<Boolean>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  homeOption?: Maybe<OptionUpdateManyWithoutHomeOptionInput>;
  pictures?: Maybe<PictureUpdateManyWithoutHomeInput>;
  type?: Maybe<String>;
  status?: Maybe<String>;
}

export interface OptionUpdateManyWithoutHomeOptionInput {
  create?: Maybe<
    OptionCreateWithoutHomeOptionInput[] | OptionCreateWithoutHomeOptionInput
  >;
  delete?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
  connect?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
  set?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
  disconnect?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
  update?: Maybe<
    | OptionUpdateWithWhereUniqueWithoutHomeOptionInput[]
    | OptionUpdateWithWhereUniqueWithoutHomeOptionInput
  >;
  upsert?: Maybe<
    | OptionUpsertWithWhereUniqueWithoutHomeOptionInput[]
    | OptionUpsertWithWhereUniqueWithoutHomeOptionInput
  >;
  deleteMany?: Maybe<OptionScalarWhereInput[] | OptionScalarWhereInput>;
  updateMany?: Maybe<
    | OptionUpdateManyWithWhereNestedInput[]
    | OptionUpdateManyWithWhereNestedInput
  >;
}

export interface OptionUpdateWithWhereUniqueWithoutHomeOptionInput {
  where: OptionWhereUniqueInput;
  data: OptionUpdateWithoutHomeOptionDataInput;
}

export interface OptionUpdateWithoutHomeOptionDataInput {
  name?: Maybe<String>;
}

export interface OptionUpsertWithWhereUniqueWithoutHomeOptionInput {
  where: OptionWhereUniqueInput;
  update: OptionUpdateWithoutHomeOptionDataInput;
  create: OptionCreateWithoutHomeOptionInput;
}

export interface OptionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<OptionScalarWhereInput[] | OptionScalarWhereInput>;
  OR?: Maybe<OptionScalarWhereInput[] | OptionScalarWhereInput>;
  NOT?: Maybe<OptionScalarWhereInput[] | OptionScalarWhereInput>;
}

export interface OptionUpdateManyWithWhereNestedInput {
  where: OptionScalarWhereInput;
  data: OptionUpdateManyDataInput;
}

export interface OptionUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface PictureUpdateManyWithoutHomeInput {
  create?: Maybe<
    PictureCreateWithoutHomeInput[] | PictureCreateWithoutHomeInput
  >;
  delete?: Maybe<PictureWhereUniqueInput[] | PictureWhereUniqueInput>;
  connect?: Maybe<PictureWhereUniqueInput[] | PictureWhereUniqueInput>;
  set?: Maybe<PictureWhereUniqueInput[] | PictureWhereUniqueInput>;
  disconnect?: Maybe<PictureWhereUniqueInput[] | PictureWhereUniqueInput>;
  update?: Maybe<
    | PictureUpdateWithWhereUniqueWithoutHomeInput[]
    | PictureUpdateWithWhereUniqueWithoutHomeInput
  >;
  upsert?: Maybe<
    | PictureUpsertWithWhereUniqueWithoutHomeInput[]
    | PictureUpsertWithWhereUniqueWithoutHomeInput
  >;
  deleteMany?: Maybe<PictureScalarWhereInput[] | PictureScalarWhereInput>;
  updateMany?: Maybe<
    | PictureUpdateManyWithWhereNestedInput[]
    | PictureUpdateManyWithWhereNestedInput
  >;
}

export interface PictureUpdateWithWhereUniqueWithoutHomeInput {
  where: PictureWhereUniqueInput;
  data: PictureUpdateWithoutHomeDataInput;
}

export interface PictureUpdateWithoutHomeDataInput {
  image?: Maybe<String>;
  isMainPicture?: Maybe<Boolean>;
}

export interface PictureUpsertWithWhereUniqueWithoutHomeInput {
  where: PictureWhereUniqueInput;
  update: PictureUpdateWithoutHomeDataInput;
  create: PictureCreateWithoutHomeInput;
}

export interface PictureScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  isMainPicture?: Maybe<Boolean>;
  isMainPicture_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PictureScalarWhereInput[] | PictureScalarWhereInput>;
  OR?: Maybe<PictureScalarWhereInput[] | PictureScalarWhereInput>;
  NOT?: Maybe<PictureScalarWhereInput[] | PictureScalarWhereInput>;
}

export interface PictureUpdateManyWithWhereNestedInput {
  where: PictureScalarWhereInput;
  data: PictureUpdateManyDataInput;
}

export interface PictureUpdateManyDataInput {
  image?: Maybe<String>;
  isMainPicture?: Maybe<Boolean>;
}

export interface HomeUpsertWithWhereUniqueWithoutOwnerInput {
  where: HomeWhereUniqueInput;
  update: HomeUpdateWithoutOwnerDataInput;
  create: HomeCreateWithoutOwnerInput;
}

export interface HomeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  AND?: Maybe<HomeScalarWhereInput[] | HomeScalarWhereInput>;
  OR?: Maybe<HomeScalarWhereInput[] | HomeScalarWhereInput>;
  NOT?: Maybe<HomeScalarWhereInput[] | HomeScalarWhereInput>;
}

export interface HomeUpdateManyWithWhereNestedInput {
  where: HomeScalarWhereInput;
  data: HomeUpdateManyDataInput;
}

export interface HomeUpdateManyDataInput {
  active?: Maybe<Boolean>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  type?: Maybe<String>;
  status?: Maybe<String>;
}

export interface NotificationUpdateManyWithoutOwnerInput {
  create?: Maybe<
    NotificationCreateWithoutOwnerInput[] | NotificationCreateWithoutOwnerInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutOwnerInput[]
    | NotificationUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutOwnerInput[]
    | NotificationUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpdateWithWhereUniqueWithoutOwnerInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutOwnerDataInput;
}

export interface NotificationUpdateWithoutOwnerDataInput {
  description?: Maybe<String>;
  viewed?: Maybe<Boolean>;
}

export interface NotificationUpsertWithWhereUniqueWithoutOwnerInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutOwnerDataInput;
  create: NotificationCreateWithoutOwnerInput;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  viewed?: Maybe<Boolean>;
  viewed_not?: Maybe<Boolean>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface NotificationUpdateManyDataInput {
  description?: Maybe<String>;
  viewed?: Maybe<Boolean>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface EventUserUpsertWithWhereUniqueWithoutEventInput {
  where: EventUserWhereUniqueInput;
  update: EventUserUpdateWithoutEventDataInput;
  create: EventUserCreateWithoutEventInput;
}

export interface EventUserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  isOwner?: Maybe<Boolean>;
  isOwner_not?: Maybe<Boolean>;
  AND?: Maybe<EventUserScalarWhereInput[] | EventUserScalarWhereInput>;
  OR?: Maybe<EventUserScalarWhereInput[] | EventUserScalarWhereInput>;
  NOT?: Maybe<EventUserScalarWhereInput[] | EventUserScalarWhereInput>;
}

export interface EventUserUpdateManyWithWhereNestedInput {
  where: EventUserScalarWhereInput;
  data: EventUserUpdateManyDataInput;
}

export interface EventUserUpdateManyDataInput {
  isOwner?: Maybe<Boolean>;
}

export interface EventUpsertWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput;
  update: EventUpdateDataInput;
  create: EventCreateInput;
}

export interface EventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  peopleLimit?: Maybe<Int>;
  peopleLimit_not?: Maybe<Int>;
  peopleLimit_in?: Maybe<Int[] | Int>;
  peopleLimit_not_in?: Maybe<Int[] | Int>;
  peopleLimit_lt?: Maybe<Int>;
  peopleLimit_lte?: Maybe<Int>;
  peopleLimit_gt?: Maybe<Int>;
  peopleLimit_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  description?: Maybe<String>;
  name?: Maybe<String>;
  peopleLimit?: Maybe<Int>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
}

export interface UserUpsertWithoutHomesInput {
  update: UserUpdateWithoutHomesDataInput;
  create: UserCreateWithoutHomesInput;
}

export interface HomeUpsertNestedInput {
  update: HomeUpdateDataInput;
  create: HomeCreateInput;
}

export interface RentUpsertNestedInput {
  update: RentUpdateDataInput;
  create: RentCreateInput;
}

export interface EventUpdateManyMutationInput {
  description?: Maybe<String>;
  name?: Maybe<String>;
  peopleLimit?: Maybe<Int>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
}

export interface EventUserCreateInput {
  id?: Maybe<ID_Input>;
  event: EventCreateOneWithoutEventUsersInput;
  user: UserCreateOneInput;
  isOwner?: Maybe<Boolean>;
}

export interface EventCreateOneWithoutEventUsersInput {
  create?: Maybe<EventCreateWithoutEventUsersInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutEventUsersInput {
  id?: Maybe<ID_Input>;
  description?: Maybe<String>;
  name: String;
  peopleLimit: Int;
  rent?: Maybe<RentCreateOneInput>;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  status: String;
}

export interface EventUserUpdateInput {
  event?: Maybe<EventUpdateOneRequiredWithoutEventUsersInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  isOwner?: Maybe<Boolean>;
}

export interface EventUpdateOneRequiredWithoutEventUsersInput {
  create?: Maybe<EventCreateWithoutEventUsersInput>;
  update?: Maybe<EventUpdateWithoutEventUsersDataInput>;
  upsert?: Maybe<EventUpsertWithoutEventUsersInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventUpdateWithoutEventUsersDataInput {
  description?: Maybe<String>;
  name?: Maybe<String>;
  peopleLimit?: Maybe<Int>;
  rent?: Maybe<RentUpdateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
}

export interface EventUpsertWithoutEventUsersInput {
  update: EventUpdateWithoutEventUsersDataInput;
  create: EventCreateWithoutEventUsersInput;
}

export interface EventUserUpdateManyMutationInput {
  isOwner?: Maybe<Boolean>;
}

export interface HomeUpdateInput {
  active?: Maybe<Boolean>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneWithoutHomesInput>;
  homeOption?: Maybe<OptionUpdateManyWithoutHomeOptionInput>;
  pictures?: Maybe<PictureUpdateManyWithoutHomeInput>;
  type?: Maybe<String>;
  status?: Maybe<String>;
}

export interface HomeUpdateManyMutationInput {
  active?: Maybe<Boolean>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  type?: Maybe<String>;
  status?: Maybe<String>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  description?: Maybe<String>;
  owner?: Maybe<UserCreateOneWithoutNotificationsInput>;
  viewed?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  company?: Maybe<String>;
  email: String;
  firstname: String;
  lastname: String;
  password: String;
  phone: String;
  roles: Json;
  token?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  homes?: Maybe<HomeCreateManyWithoutOwnerInput>;
  events?: Maybe<EventCreateManyInput>;
}

export interface NotificationUpdateInput {
  description?: Maybe<String>;
  owner?: Maybe<UserUpdateOneWithoutNotificationsInput>;
  viewed?: Maybe<Boolean>;
}

export interface UserUpdateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNotificationsDataInput {
  company?: Maybe<String>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  roles?: Maybe<Json>;
  token?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  homes?: Maybe<HomeUpdateManyWithoutOwnerInput>;
  events?: Maybe<EventUpdateManyInput>;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface NotificationUpdateManyMutationInput {
  description?: Maybe<String>;
  viewed?: Maybe<Boolean>;
}

export interface OptionCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  homeOption?: Maybe<HomeCreateOneWithoutHomeOptionInput>;
}

export interface HomeCreateOneWithoutHomeOptionInput {
  create?: Maybe<HomeCreateWithoutHomeOptionInput>;
  connect?: Maybe<HomeWhereUniqueInput>;
}

export interface HomeCreateWithoutHomeOptionInput {
  id?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  address: String;
  city: String;
  country: String;
  description?: Maybe<String>;
  name: String;
  price: Float;
  owner?: Maybe<UserCreateOneWithoutHomesInput>;
  pictures?: Maybe<PictureCreateManyWithoutHomeInput>;
  type: String;
  status: String;
}

export interface OptionUpdateInput {
  name?: Maybe<String>;
  homeOption?: Maybe<HomeUpdateOneWithoutHomeOptionInput>;
}

export interface HomeUpdateOneWithoutHomeOptionInput {
  create?: Maybe<HomeCreateWithoutHomeOptionInput>;
  update?: Maybe<HomeUpdateWithoutHomeOptionDataInput>;
  upsert?: Maybe<HomeUpsertWithoutHomeOptionInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HomeWhereUniqueInput>;
}

export interface HomeUpdateWithoutHomeOptionDataInput {
  active?: Maybe<Boolean>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneWithoutHomesInput>;
  pictures?: Maybe<PictureUpdateManyWithoutHomeInput>;
  type?: Maybe<String>;
  status?: Maybe<String>;
}

export interface HomeUpsertWithoutHomeOptionInput {
  update: HomeUpdateWithoutHomeOptionDataInput;
  create: HomeCreateWithoutHomeOptionInput;
}

export interface OptionUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface PictureCreateInput {
  id?: Maybe<ID_Input>;
  image: String;
  isMainPicture?: Maybe<Boolean>;
  home?: Maybe<HomeCreateOneWithoutPicturesInput>;
}

export interface HomeCreateOneWithoutPicturesInput {
  create?: Maybe<HomeCreateWithoutPicturesInput>;
  connect?: Maybe<HomeWhereUniqueInput>;
}

export interface HomeCreateWithoutPicturesInput {
  id?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  address: String;
  city: String;
  country: String;
  description?: Maybe<String>;
  name: String;
  price: Float;
  owner?: Maybe<UserCreateOneWithoutHomesInput>;
  homeOption?: Maybe<OptionCreateManyWithoutHomeOptionInput>;
  type: String;
  status: String;
}

export interface PictureUpdateInput {
  image?: Maybe<String>;
  isMainPicture?: Maybe<Boolean>;
  home?: Maybe<HomeUpdateOneWithoutPicturesInput>;
}

export interface HomeUpdateOneWithoutPicturesInput {
  create?: Maybe<HomeCreateWithoutPicturesInput>;
  update?: Maybe<HomeUpdateWithoutPicturesDataInput>;
  upsert?: Maybe<HomeUpsertWithoutPicturesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HomeWhereUniqueInput>;
}

export interface HomeUpdateWithoutPicturesDataInput {
  active?: Maybe<Boolean>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneWithoutHomesInput>;
  homeOption?: Maybe<OptionUpdateManyWithoutHomeOptionInput>;
  type?: Maybe<String>;
  status?: Maybe<String>;
}

export interface HomeUpsertWithoutPicturesInput {
  update: HomeUpdateWithoutPicturesDataInput;
  create: HomeCreateWithoutPicturesInput;
}

export interface PictureUpdateManyMutationInput {
  image?: Maybe<String>;
  isMainPicture?: Maybe<Boolean>;
}

export interface RentUpdateInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  totalPrice?: Maybe<Float>;
  rentService?: Maybe<ServiceUpdateManyWithoutRentServiceInput>;
  home?: Maybe<HomeUpdateOneRequiredInput>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface RentUpdateManyMutationInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  totalPrice?: Maybe<Float>;
}

export interface ServiceCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  price: Float;
  rentService?: Maybe<RentCreateOneWithoutRentServiceInput>;
}

export interface RentCreateOneWithoutRentServiceInput {
  create?: Maybe<RentCreateWithoutRentServiceInput>;
  connect?: Maybe<RentWhereUniqueInput>;
}

export interface RentCreateWithoutRentServiceInput {
  id?: Maybe<ID_Input>;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  totalPrice: Float;
  home: HomeCreateOneInput;
  owner: UserCreateOneInput;
}

export interface ServiceUpdateInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
  rentService?: Maybe<RentUpdateOneWithoutRentServiceInput>;
}

export interface RentUpdateOneWithoutRentServiceInput {
  create?: Maybe<RentCreateWithoutRentServiceInput>;
  update?: Maybe<RentUpdateWithoutRentServiceDataInput>;
  upsert?: Maybe<RentUpsertWithoutRentServiceInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RentWhereUniqueInput>;
}

export interface RentUpdateWithoutRentServiceDataInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  totalPrice?: Maybe<Float>;
  home?: Maybe<HomeUpdateOneRequiredInput>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface RentUpsertWithoutRentServiceInput {
  update: RentUpdateWithoutRentServiceDataInput;
  create: RentCreateWithoutRentServiceInput;
}

export interface ServiceUpdateManyMutationInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface UserUpdateInput {
  company?: Maybe<String>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  roles?: Maybe<Json>;
  token?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
  homes?: Maybe<HomeUpdateManyWithoutOwnerInput>;
  events?: Maybe<EventUpdateManyInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutOwnerInput>;
}

export interface UserUpdateManyMutationInput {
  company?: Maybe<String>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  roles?: Maybe<Json>;
  token?: Maybe<String>;
  deletedAt?: Maybe<DateTimeInput>;
}

export interface DoctrineMigrationVersionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DoctrineMigrationVersionWhereInput>;
  AND?: Maybe<
    | DoctrineMigrationVersionSubscriptionWhereInput[]
    | DoctrineMigrationVersionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | DoctrineMigrationVersionSubscriptionWhereInput[]
    | DoctrineMigrationVersionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | DoctrineMigrationVersionSubscriptionWhereInput[]
    | DoctrineMigrationVersionSubscriptionWhereInput
  >;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface EventUserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventUserWhereInput>;
  AND?: Maybe<
    EventUserSubscriptionWhereInput[] | EventUserSubscriptionWhereInput
  >;
  OR?: Maybe<
    EventUserSubscriptionWhereInput[] | EventUserSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EventUserSubscriptionWhereInput[] | EventUserSubscriptionWhereInput
  >;
}

export interface HomeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HomeWhereInput>;
  AND?: Maybe<HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput>;
  OR?: Maybe<HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput>;
  NOT?: Maybe<HomeSubscriptionWhereInput[] | HomeSubscriptionWhereInput>;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface OptionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OptionWhereInput>;
  AND?: Maybe<OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput>;
  OR?: Maybe<OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput>;
  NOT?: Maybe<OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput>;
}

export interface PictureSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PictureWhereInput>;
  AND?: Maybe<PictureSubscriptionWhereInput[] | PictureSubscriptionWhereInput>;
  OR?: Maybe<PictureSubscriptionWhereInput[] | PictureSubscriptionWhereInput>;
  NOT?: Maybe<PictureSubscriptionWhereInput[] | PictureSubscriptionWhereInput>;
}

export interface RentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RentWhereInput>;
  AND?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
  OR?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
  NOT?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceWhereInput>;
  AND?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
  OR?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
  NOT?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface DoctrineMigrationVersion {
  version: ID_Output;
  executedAt?: DateTimeOutput;
  executionTime?: Int;
}

export interface DoctrineMigrationVersionPromise
  extends Promise<DoctrineMigrationVersion>,
    Fragmentable {
  version: () => Promise<ID_Output>;
  executedAt: () => Promise<DateTimeOutput>;
  executionTime: () => Promise<Int>;
}

export interface DoctrineMigrationVersionSubscription
  extends Promise<AsyncIterator<DoctrineMigrationVersion>>,
    Fragmentable {
  version: () => Promise<AsyncIterator<ID_Output>>;
  executedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  executionTime: () => Promise<AsyncIterator<Int>>;
}

export interface DoctrineMigrationVersionNullablePromise
  extends Promise<DoctrineMigrationVersion | null>,
    Fragmentable {
  version: () => Promise<ID_Output>;
  executedAt: () => Promise<DateTimeOutput>;
  executionTime: () => Promise<Int>;
}

export interface DoctrineMigrationVersionConnection {
  pageInfo: PageInfo;
  edges: DoctrineMigrationVersionEdge[];
}

export interface DoctrineMigrationVersionConnectionPromise
  extends Promise<DoctrineMigrationVersionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DoctrineMigrationVersionEdge>>() => T;
  aggregate: <T = AggregateDoctrineMigrationVersionPromise>() => T;
}

export interface DoctrineMigrationVersionConnectionSubscription
  extends Promise<AsyncIterator<DoctrineMigrationVersionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<DoctrineMigrationVersionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateDoctrineMigrationVersionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DoctrineMigrationVersionEdge {
  node: DoctrineMigrationVersion;
  cursor: String;
}

export interface DoctrineMigrationVersionEdgePromise
  extends Promise<DoctrineMigrationVersionEdge>,
    Fragmentable {
  node: <T = DoctrineMigrationVersionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DoctrineMigrationVersionEdgeSubscription
  extends Promise<AsyncIterator<DoctrineMigrationVersionEdge>>,
    Fragmentable {
  node: <T = DoctrineMigrationVersionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDoctrineMigrationVersion {
  count: Int;
}

export interface AggregateDoctrineMigrationVersionPromise
  extends Promise<AggregateDoctrineMigrationVersion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDoctrineMigrationVersionSubscription
  extends Promise<AsyncIterator<AggregateDoctrineMigrationVersion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event {
  id: ID_Output;
  description?: String;
  name: String;
  peopleLimit: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  status: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  peopleLimit: () => Promise<Int>;
  rent: <T = RentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  eventUsers: <T = FragmentableArray<EventUser>>(args?: {
    where?: EventUserWhereInput;
    orderBy?: EventUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<String>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  peopleLimit: () => Promise<AsyncIterator<Int>>;
  rent: <T = RentSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  eventUsers: <T = Promise<AsyncIterator<EventUserSubscription>>>(args?: {
    where?: EventUserWhereInput;
    orderBy?: EventUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<AsyncIterator<String>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  peopleLimit: () => Promise<Int>;
  rent: <T = RentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  eventUsers: <T = FragmentableArray<EventUser>>(args?: {
    where?: EventUserWhereInput;
    orderBy?: EventUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<String>;
}

export interface Rent {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  totalPrice: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RentPromise extends Promise<Rent>, Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalPrice: () => Promise<Float>;
  rentService: <T = FragmentableArray<Service>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  home: <T = HomePromise>() => T;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RentSubscription
  extends Promise<AsyncIterator<Rent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  rentService: <T = Promise<AsyncIterator<ServiceSubscription>>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  home: <T = HomeSubscription>() => T;
  owner: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RentNullablePromise
  extends Promise<Rent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalPrice: () => Promise<Float>;
  rentService: <T = FragmentableArray<Service>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  home: <T = HomePromise>() => T;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Service {
  id: ID_Output;
  name: String;
  price: Float;
}

export interface ServicePromise extends Promise<Service>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  rentService: <T = RentPromise>() => T;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<Service>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  rentService: <T = RentSubscription>() => T;
}

export interface ServiceNullablePromise
  extends Promise<Service | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  rentService: <T = RentPromise>() => T;
}

export interface Home {
  id: ID_Output;
  active: Boolean;
  address: String;
  city: String;
  country: String;
  description?: String;
  name: String;
  price: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: String;
  status: String;
}

export interface HomePromise extends Promise<Home>, Fragmentable {
  id: () => Promise<ID_Output>;
  active: () => Promise<Boolean>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  homeOption: <T = FragmentableArray<Option>>(args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pictures: <T = FragmentableArray<Picture>>(args?: {
    where?: PictureWhereInput;
    orderBy?: PictureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<String>;
  status: () => Promise<String>;
}

export interface HomeSubscription
  extends Promise<AsyncIterator<Home>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  owner: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  homeOption: <T = Promise<AsyncIterator<OptionSubscription>>>(args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pictures: <T = Promise<AsyncIterator<PictureSubscription>>>(args?: {
    where?: PictureWhereInput;
    orderBy?: PictureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface HomeNullablePromise
  extends Promise<Home | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  active: () => Promise<Boolean>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  homeOption: <T = FragmentableArray<Option>>(args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pictures: <T = FragmentableArray<Picture>>(args?: {
    where?: PictureWhereInput;
    orderBy?: PictureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<String>;
  status: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  company?: String;
  email: String;
  firstname: String;
  lastname: String;
  password: String;
  phone: String;
  roles: Json;
  token?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  company: () => Promise<String>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  roles: () => Promise<Json>;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  homes: <T = FragmentableArray<Home>>(args?: {
    where?: HomeWhereInput;
    orderBy?: HomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  company: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<Json>>;
  token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  homes: <T = Promise<AsyncIterator<HomeSubscription>>>(args?: {
    where?: HomeWhereInput;
    orderBy?: HomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  company: () => Promise<String>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  roles: () => Promise<Json>;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
  homes: <T = FragmentableArray<Home>>(args?: {
    where?: HomeWhereInput;
    orderBy?: HomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Notification {
  id: ID_Output;
  description?: String;
  viewed: Boolean;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  viewed: () => Promise<Boolean>;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  viewed: () => Promise<AsyncIterator<Boolean>>;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  viewed: () => Promise<Boolean>;
}

export interface Option {
  id: ID_Output;
  name: String;
}

export interface OptionPromise extends Promise<Option>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  homeOption: <T = HomePromise>() => T;
}

export interface OptionSubscription
  extends Promise<AsyncIterator<Option>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  homeOption: <T = HomeSubscription>() => T;
}

export interface OptionNullablePromise
  extends Promise<Option | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  homeOption: <T = HomePromise>() => T;
}

export interface Picture {
  id: ID_Output;
  image: String;
  isMainPicture: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PicturePromise extends Promise<Picture>, Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  isMainPicture: () => Promise<Boolean>;
  home: <T = HomePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PictureSubscription
  extends Promise<AsyncIterator<Picture>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  isMainPicture: () => Promise<AsyncIterator<Boolean>>;
  home: <T = HomeSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PictureNullablePromise
  extends Promise<Picture | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  isMainPicture: () => Promise<Boolean>;
  home: <T = HomePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventUser {
  id: ID_Output;
  isOwner: Boolean;
}

export interface EventUserPromise extends Promise<EventUser>, Fragmentable {
  id: () => Promise<ID_Output>;
  event: <T = EventPromise>() => T;
  user: <T = UserPromise>() => T;
  isOwner: () => Promise<Boolean>;
}

export interface EventUserSubscription
  extends Promise<AsyncIterator<EventUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  event: <T = EventSubscription>() => T;
  user: <T = UserSubscription>() => T;
  isOwner: () => Promise<AsyncIterator<Boolean>>;
}

export interface EventUserNullablePromise
  extends Promise<EventUser | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  event: <T = EventPromise>() => T;
  user: <T = UserPromise>() => T;
  isOwner: () => Promise<Boolean>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventUserConnection {
  pageInfo: PageInfo;
  edges: EventUserEdge[];
}

export interface EventUserConnectionPromise
  extends Promise<EventUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventUserEdge>>() => T;
  aggregate: <T = AggregateEventUserPromise>() => T;
}

export interface EventUserConnectionSubscription
  extends Promise<AsyncIterator<EventUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventUserSubscription>() => T;
}

export interface EventUserEdge {
  node: EventUser;
  cursor: String;
}

export interface EventUserEdgePromise
  extends Promise<EventUserEdge>,
    Fragmentable {
  node: <T = EventUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventUserEdgeSubscription
  extends Promise<AsyncIterator<EventUserEdge>>,
    Fragmentable {
  node: <T = EventUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEventUser {
  count: Int;
}

export interface AggregateEventUserPromise
  extends Promise<AggregateEventUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventUserSubscription
  extends Promise<AsyncIterator<AggregateEventUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HomeConnection {
  pageInfo: PageInfo;
  edges: HomeEdge[];
}

export interface HomeConnectionPromise
  extends Promise<HomeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HomeEdge>>() => T;
  aggregate: <T = AggregateHomePromise>() => T;
}

export interface HomeConnectionSubscription
  extends Promise<AsyncIterator<HomeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HomeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHomeSubscription>() => T;
}

export interface HomeEdge {
  node: Home;
  cursor: String;
}

export interface HomeEdgePromise extends Promise<HomeEdge>, Fragmentable {
  node: <T = HomePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HomeEdgeSubscription
  extends Promise<AsyncIterator<HomeEdge>>,
    Fragmentable {
  node: <T = HomeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHome {
  count: Int;
}

export interface AggregateHomePromise
  extends Promise<AggregateHome>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHomeSubscription
  extends Promise<AsyncIterator<AggregateHome>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OptionConnection {
  pageInfo: PageInfo;
  edges: OptionEdge[];
}

export interface OptionConnectionPromise
  extends Promise<OptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OptionEdge>>() => T;
  aggregate: <T = AggregateOptionPromise>() => T;
}

export interface OptionConnectionSubscription
  extends Promise<AsyncIterator<OptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOptionSubscription>() => T;
}

export interface OptionEdge {
  node: Option;
  cursor: String;
}

export interface OptionEdgePromise extends Promise<OptionEdge>, Fragmentable {
  node: <T = OptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OptionEdgeSubscription
  extends Promise<AsyncIterator<OptionEdge>>,
    Fragmentable {
  node: <T = OptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOption {
  count: Int;
}

export interface AggregateOptionPromise
  extends Promise<AggregateOption>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOptionSubscription
  extends Promise<AsyncIterator<AggregateOption>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PictureConnection {
  pageInfo: PageInfo;
  edges: PictureEdge[];
}

export interface PictureConnectionPromise
  extends Promise<PictureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PictureEdge>>() => T;
  aggregate: <T = AggregatePicturePromise>() => T;
}

export interface PictureConnectionSubscription
  extends Promise<AsyncIterator<PictureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PictureEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePictureSubscription>() => T;
}

export interface PictureEdge {
  node: Picture;
  cursor: String;
}

export interface PictureEdgePromise extends Promise<PictureEdge>, Fragmentable {
  node: <T = PicturePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PictureEdgeSubscription
  extends Promise<AsyncIterator<PictureEdge>>,
    Fragmentable {
  node: <T = PictureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePicture {
  count: Int;
}

export interface AggregatePicturePromise
  extends Promise<AggregatePicture>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePictureSubscription
  extends Promise<AsyncIterator<AggregatePicture>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RentConnection {
  pageInfo: PageInfo;
  edges: RentEdge[];
}

export interface RentConnectionPromise
  extends Promise<RentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RentEdge>>() => T;
  aggregate: <T = AggregateRentPromise>() => T;
}

export interface RentConnectionSubscription
  extends Promise<AsyncIterator<RentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRentSubscription>() => T;
}

export interface RentEdge {
  node: Rent;
  cursor: String;
}

export interface RentEdgePromise extends Promise<RentEdge>, Fragmentable {
  node: <T = RentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RentEdgeSubscription
  extends Promise<AsyncIterator<RentEdge>>,
    Fragmentable {
  node: <T = RentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRent {
  count: Int;
}

export interface AggregateRentPromise
  extends Promise<AggregateRent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRentSubscription
  extends Promise<AsyncIterator<AggregateRent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceConnection {
  pageInfo: PageInfo;
  edges: ServiceEdge[];
}

export interface ServiceConnectionPromise
  extends Promise<ServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceEdge>>() => T;
  aggregate: <T = AggregateServicePromise>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface ServiceEdge {
  node: Service;
  cursor: String;
}

export interface ServiceEdgePromise extends Promise<ServiceEdge>, Fragmentable {
  node: <T = ServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdge>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateService {
  count: Int;
}

export interface AggregateServicePromise
  extends Promise<AggregateService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DoctrineMigrationVersionSubscriptionPayload {
  mutation: MutationType;
  node: DoctrineMigrationVersion;
  updatedFields: String[];
  previousValues: DoctrineMigrationVersionPreviousValues;
}

export interface DoctrineMigrationVersionSubscriptionPayloadPromise
  extends Promise<DoctrineMigrationVersionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DoctrineMigrationVersionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DoctrineMigrationVersionPreviousValuesPromise>() => T;
}

export interface DoctrineMigrationVersionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DoctrineMigrationVersionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DoctrineMigrationVersionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = DoctrineMigrationVersionPreviousValuesSubscription
  >() => T;
}

export interface DoctrineMigrationVersionPreviousValues {
  version: ID_Output;
  executedAt?: DateTimeOutput;
  executionTime?: Int;
}

export interface DoctrineMigrationVersionPreviousValuesPromise
  extends Promise<DoctrineMigrationVersionPreviousValues>,
    Fragmentable {
  version: () => Promise<ID_Output>;
  executedAt: () => Promise<DateTimeOutput>;
  executionTime: () => Promise<Int>;
}

export interface DoctrineMigrationVersionPreviousValuesSubscription
  extends Promise<AsyncIterator<DoctrineMigrationVersionPreviousValues>>,
    Fragmentable {
  version: () => Promise<AsyncIterator<ID_Output>>;
  executedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  executionTime: () => Promise<AsyncIterator<Int>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  description?: String;
  name: String;
  peopleLimit: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  status: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  peopleLimit: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  peopleLimit: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface EventUserSubscriptionPayload {
  mutation: MutationType;
  node: EventUser;
  updatedFields: String[];
  previousValues: EventUserPreviousValues;
}

export interface EventUserSubscriptionPayloadPromise
  extends Promise<EventUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventUserPreviousValuesPromise>() => T;
}

export interface EventUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventUserPreviousValuesSubscription>() => T;
}

export interface EventUserPreviousValues {
  id: ID_Output;
  isOwner: Boolean;
}

export interface EventUserPreviousValuesPromise
  extends Promise<EventUserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isOwner: () => Promise<Boolean>;
}

export interface EventUserPreviousValuesSubscription
  extends Promise<AsyncIterator<EventUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isOwner: () => Promise<AsyncIterator<Boolean>>;
}

export interface HomeSubscriptionPayload {
  mutation: MutationType;
  node: Home;
  updatedFields: String[];
  previousValues: HomePreviousValues;
}

export interface HomeSubscriptionPayloadPromise
  extends Promise<HomeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HomePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HomePreviousValuesPromise>() => T;
}

export interface HomeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HomeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HomeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HomePreviousValuesSubscription>() => T;
}

export interface HomePreviousValues {
  id: ID_Output;
  active: Boolean;
  address: String;
  city: String;
  country: String;
  description?: String;
  name: String;
  price: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: String;
  status: String;
}

export interface HomePreviousValuesPromise
  extends Promise<HomePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  active: () => Promise<Boolean>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<String>;
  status: () => Promise<String>;
}

export interface HomePreviousValuesSubscription
  extends Promise<AsyncIterator<HomePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  description?: String;
  viewed: Boolean;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  viewed: () => Promise<Boolean>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  viewed: () => Promise<AsyncIterator<Boolean>>;
}

export interface OptionSubscriptionPayload {
  mutation: MutationType;
  node: Option;
  updatedFields: String[];
  previousValues: OptionPreviousValues;
}

export interface OptionSubscriptionPayloadPromise
  extends Promise<OptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OptionPreviousValuesPromise>() => T;
}

export interface OptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OptionPreviousValuesSubscription>() => T;
}

export interface OptionPreviousValues {
  id: ID_Output;
  name: String;
}

export interface OptionPreviousValuesPromise
  extends Promise<OptionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface OptionPreviousValuesSubscription
  extends Promise<AsyncIterator<OptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PictureSubscriptionPayload {
  mutation: MutationType;
  node: Picture;
  updatedFields: String[];
  previousValues: PicturePreviousValues;
}

export interface PictureSubscriptionPayloadPromise
  extends Promise<PictureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PicturePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PicturePreviousValuesPromise>() => T;
}

export interface PictureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PictureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PictureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PicturePreviousValuesSubscription>() => T;
}

export interface PicturePreviousValues {
  id: ID_Output;
  image: String;
  isMainPicture: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PicturePreviousValuesPromise
  extends Promise<PicturePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  isMainPicture: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PicturePreviousValuesSubscription
  extends Promise<AsyncIterator<PicturePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  isMainPicture: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RentSubscriptionPayload {
  mutation: MutationType;
  node: Rent;
  updatedFields: String[];
  previousValues: RentPreviousValues;
}

export interface RentSubscriptionPayloadPromise
  extends Promise<RentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RentPreviousValuesPromise>() => T;
}

export interface RentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RentPreviousValuesSubscription>() => T;
}

export interface RentPreviousValues {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  totalPrice: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RentPreviousValuesPromise
  extends Promise<RentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  totalPrice: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RentPreviousValuesSubscription
  extends Promise<AsyncIterator<RentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType;
  node: Service;
  updatedFields: String[];
  previousValues: ServicePreviousValues;
}

export interface ServiceSubscriptionPayloadPromise
  extends Promise<ServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValuesPromise>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface ServicePreviousValues {
  id: ID_Output;
  name: String;
  price: Float;
}

export interface ServicePreviousValuesPromise
  extends Promise<ServicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  company?: String;
  email: String;
  firstname: String;
  lastname: String;
  password: String;
  phone: String;
  roles: Json;
  token?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  company: () => Promise<String>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  roles: () => Promise<Json>;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  company: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<Json>>;
  token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Json = any;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "DoctrineMigrationVersion",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Home",
    embedded: false
  },
  {
    name: "Option",
    embedded: false
  },
  {
    name: "Picture",
    embedded: false
  },
  {
    name: "Rent",
    embedded: false
  },
  {
    name: "Service",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "EventUser",
    embedded: false
  },
  {
    name: "ServiceRent",
    embedded: false
  },
  {
    name: "OptionHome",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
